import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Files

plugins {
    id "com.github.jk1.dependency-license-report" version "0.3.5"
}

apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'maven'
apply from: "${project.rootDir}/gradle/eclipse.gradle"


sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'de.mediathekview'
version = '1.0.0'

def jarName = 'MServerGUI.jar'
def mainClass = 'de.mediathekview.mserver.ui.gui.MServerGUI'

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}
compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:all']
}

task copyRuntimeLibs(type: Copy) {
    into "libs"
    from configurations.testRuntime - configurations.runtime
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources

repositories {
    mavenLocal()
    maven {
        url "https://repo.mediathekview.de/repository/maven-public/"
    }
}


dependencies {
    compile 'de.mediathekview:MServer:4.0.0-SNAPSHOT'
    compile 'org.controlsfx:controlsfx:8.40.13'
    compile 'org.kordamp.ikonli:ikonli-core:1.9.0'
    
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit:4.0.+"
}

configurations.compile {
    resolutionStrategy.dependencySubstitution {
        def substituteIfExists = { String moduleName, String projectName ->
            if(findProject(projectName)) {
               assert !(project.hasProperty('org.gradle.configureondemand') && Boolean.valueOf(project.getProperty('org.gradle.configureondemand'))) : "org.gradle.configureondemand = true will cause problems when substituting a project"
               logger.lifecycle "$project: Substituting module '$moduleName' with project $projectName"
               substitute module(moduleName) with project(projectName)
            }
        }
        substituteIfExists('de.mediathekview:MLib', ':MLib')
    }
}

ext {
    repoZugangFile = file('scripte/deploy/RepoZugang.properties').absoluteFile
    if (!repoZugangFile.exists()) {
        Files.createFile(repoZugangFile.toPath())
    }
}

def loadRepoZugangProperties() {
    Properties props = new Properties()
    props.load(repoZugangFile.newDataInputStream())
    return props
}

uploadArchives {
    repositories.mavenDeployer {
        Properties props = loadRepoZugangProperties()
        def nexusUser = props.getProperty('repoUser')
        def nexusPw = props.getProperty('repoPw')
        repository(url: "https://repo.mediathekview.de/repository/maven-releases/") {
            authentication(userName:  nexusUser, password:  nexusPw)
        }
        snapshotRepository(url: "https://repo.mediathekview.de/repository/maven-snapshots/") {
            authentication(userName:  nexusUser, password:  nexusPw)
        }
    }
}
build.dependsOn(install)

licenseReport {
    outputDir = "build/Copyright/"
    excludes = [':MServerGUI', 'MediathekView:MLib', 'MediathekView:MServer']
    configurations = ['compile']
}

processResources.dependsOn generateLicenseReport

[distZip, distTar]*.shouldRunAfter compileJava, jar
distTar.compression = Compression.GZIP
distTar.extension = 'tar.gz'

jar {
    manifest {
        attributes(
                'Main-Class': mainClass,
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
        )
    }
    archiveName = jarName
}

distributions {
    main {
        baseName = 'MServerGUI'
        contents {
            into('lib') {
                from configurations.compile
            }
            from('dist') {
                filesMatching('**/*.sh') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
                filesMatching('**/*.txt') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
                filesMatching('**/*.command') {
                    filter(ReplaceTokens, tokens: [JARNAME: jarName])
                }
            }
            from('build/libs') {
                include '*.jar'
            }
            from('build') {
                include 'Copyright/*'
            }
        }
    }
}

/**
 * This is how you pass arguments: "./gradlew run -Pargs=arg1,arg2,arg3
 */
task run(type: JavaExec, dependsOn: classes) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath

    if (project.hasProperty('args')) {
        args(project.args.split(','))
    }
}

/**
 * HOWTO debug:
 *  1. run "gradle debug"
 *  2. Call your IDE to connect to a remote java application on port 5005.
 *
 * This is how you pass arguments: "./gradlew debug -Pargs=arg1,arg2,arg3
 */
task debug(type: JavaExec, dependsOn: classes) {
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    debug true

    if (project.hasProperty('args')) {
        args(project.args.split(','))
    }
}

/**
 * <b>You don't have to call this. Travis will do it for you if a new releass (tag) will be build!<b/>
 * Call this so: './gradlew build release -PnexusUser=[NEXUS_USER] -PnexusPw=[NEXUS_PASSWORD]'
 */
task release(dependsOn: 'uploadArchives') {
    doLast {
        println 'Released Version '+version
    }
}

/**
 * <b>You don't have to call this. Travis will do it for you if you push to develop!<b/>
 * Call this so: './gradlew build releaseSnapshot -PnexusUser=[NEXUS_USER] -PnexusPw=[NEXUS_PASSWORD]'
 */
task releaseSnapshot(dependsOn: 'uploadArchives') {
    doLast {
        println 'Released Snapshot Version '+version
    }
}

gradle.taskGraph.whenReady {taskGraph ->
    if (!taskGraph.hasTask(release)) {
        version = version+'-SNAPSHOT'
    }
}

